#!/usr/bin/env perl
#
# OPI - openSUSE Build Service Package Installer
#
# Version:    0.1.0
# Author:     Guo Yunhe
# Website:    https://github.com/openSUSE-zh/opi
# License:    GPL-3.0
#
# Created at: 2019-04-25
# Updated at: 2019-04-25

use strict;
use warnings;
use LWP::UserAgent;
use XML::LibXML;
use URI::Escape;
use Config;
use Config::Tiny;

# Check command line arguments
unless (scalar @ARGV) {
    print 'Please specify query keywords. For example:\n';
    print '    opi pcsx2\n';
    exit 1;
}

my $distribution = get_distribution();

# API configuration
my $username = 'wiki_hermes';
my $password = 'w_h_p1';
my $server = "https://$username:$password\@api.opensuse.org";

my @bins = search_published_binary(@ARGV);
my @ns = get_binary_names(@bins);

my $i = 1;
foreach my $n (@ns) {
    print "$i. $n\n";
    $i++;
}

print "Choose a number: ";
my $selected_name_number = <STDIN>;
chomp $selected_name_number;
$selected_name_number += 0; # Convert string to number

my $selected_name = $ns[$selected_name_number - 1];

print "You have selected package: $selected_name\n";

my @binary_options = get_binary_by_name($selected_name, @bins);

$i = 1;
foreach my $b (@binary_options) {
    my $bin_project = $b->{project};
    my $bin_version = $b->{version};
    my $bin_arch = $b->{arch};
    print "$i. $bin_project | $bin_version | $bin_arch\n";
    $i++;
}

sub get_distribution {
    my $config = Config::Tiny->read('/etc/os-release');
    my $name = $config->{_}->{NAME};
    my $version = $config->{_}->{VERSION};
    $name = substr $name, 1, -1; # Remove quotes
    if ($name eq 'openSUSE Tumbleweed') {
        return 'openSUSE:Factory';
    } elsif ($name eq 'openSUSE Leap') {
        return 'openSUSE:Leap:' . $version;
    } else {
        print "Your distribution $name $version is not supported.\n";
        exit 1;
    }
}

sub get_architecture {
    my $perl_arch = $Config{'archname'};

    if (substr($perl_arch, 0, 4) eq 'i386') {
        return 'i586';
    }

    $perl_arch =~ m/^([a-z0-9_]+)/;

    return $&;
}

sub search_published_binary {
    my $endpoint = '/search/published/binary/id';

    my $query_string = join "', '", @_;
    $query_string = "'" . $query_string . "'";
    my $xpath = "contains-ic(\@name, $query_string) and path/project='$distribution'";

    my $url = $server . $endpoint . '?match=' . uri_escape($xpath);

    my $req = HTTP::Request->new(GET => $url);
    my $ua = LWP::UserAgent->new;
    my $resp = $ua->request($req);
    if ($resp->is_success) {
        my $message = $resp->decoded_content;

        open(my $fh, '>', 'search.xml');
        print $fh $message;
        close $fh;

        my $dom = XML::LibXML->load_xml(string => $message);

        my @collection = ();

        my $arch = get_architecture();

        foreach my $binary ($dom->findnodes('/collection/binary')) {
            my %binary_data;
            $binary_data{'name'} = $binary->getAttribute('name');
            $binary_data{'project'} = $binary->getAttribute('project');
            $binary_data{'package'} = $binary->getAttribute('package');
            $binary_data{'repository'} = $binary->getAttribute('repository');
            $binary_data{'version'} = $binary->getAttribute('version');
            $binary_data{'release'} = $binary->getAttribute('release');
            $binary_data{'arch'} = $binary->getAttribute('arch');
            $binary_data{'filename'} = $binary->getAttribute('filename');
            $binary_data{'filepath'} = $binary->getAttribute('filepath');
            $binary_data{'baseproject'} = $binary->getAttribute('baseproject');
            $binary_data{'type'} = $binary->getAttribute('type');
            # Filter out ghost binary (package has been deleted, but binary still exists)
            if ( ! $binary_data{'package'} ) {
                next;
            }

            # Filter out debuginfo, debugsource, buildsymbols packages
            if ( substr($binary->{'name'}, -10) eq '-debuginfo' ) {
                next;
            } elsif ( substr($binary->{'name'}, -12) eq '-debugsource' ) {
                next;
            } elsif ( substr($binary->{'name'}, -13) eq '-buildsymbols' ) {
                next;
            }

            # Filter out source packages
            if ( $binary->{'arch'} eq 'src' ) {
                next;
            }

            # Filter architecture
            unless ( $binary->{'arch'} eq $arch ) {
                unless ( $binary->{'arch'} eq 'i586' && $arch eq 'x86_64' ) {
                    next;
                }
            }

            push @collection, \%binary_data;
        }

        return sort { -get_binary_weight($a) <=> -get_binary_weight($b) } @collection;
    }
    else {
        print "HTTP GET error code: ", $resp->code, "\n";
        print "HTTP GET error message: ", $resp->message, "\n";
    }
}

sub get_binary_names {
    my @names = ();
    foreach my $bin (@_) {
        my $name = $bin->{'name'};
        if (! grep /($name)/, @names) {
            push @names, $name;
        }
    }
    return @names;
}

sub get_binary_weight {
    my $binary = $_[0];
    my $weights = {
        official => 0,
        main => 0,
        dashes => 0,
        arch => 0,
    };

    if ( substr($binary->{'project'}, 0, 9) eq 'openSUSE:' ) {
        $weights->{official} = 20000;
    } elsif ( substr($binary->{'project'}, 0, 5) eq 'home:' ) {
        $weights->{official} = 0;
    } else {
        $weights->{official} = 10000;
    }

    if ( $binary->{'name'} eq $binary->{'package'} ) {
        $weights->{main} = 1000;
    }

    my $dash_count = () = $binary->{'name'} =~ /-/g;
    $weights->{dashes} = 100 * (0.5**$dash_count);

    if ($binary->{'arch'} eq 'x86_64') {
        $weights->{arch} = 10;
    }

    return $weights->{official} + $weights->{main} + $weights->{dashes} + $weights->{arch};
}

sub get_binary_by_name {
    my $name = $_[0];
    my @binary_list = splice @_, 1;
    my @filtered_binary_list = ();

    foreach my $bin (@binary_list) {
        if ($name eq $bin->{'name'}) {
            push @filtered_binary_list, $bin;
        }
    }

    return @filtered_binary_list;
}
