#!/usr/bin/env perl
#
# OPI - openSUSE Build Service Package Installer
#
# Version:    0.1.0
# Author:     Guo Yunhe
# Website:    https://github.com/openSUSE-zh/opi
# License:    GPL-3.0
#
# Created at: 2019-04-25
# Updated at: 2019-04-25

use strict;
use warnings;
use LWP::UserAgent;
use XML::LibXML;
use URI::Escape;
use Config;
use Config::Tiny;
use Term::ANSIColor;


#
# Check command line arguments
#
unless (scalar @ARGV) {
    print 'Please specify query keywords. For example:\n';
    print '    opi pcsx2\n';
    exit 1;
}


#
# API configuration
#
my $username = 'wiki_hermes';
my $password = 'w_h_p1';
my $server = "https://$username:$password\@api.opensuse.org";


#
# Search packages
#
my @bins = search_published_binary(@ARGV);
my @binary_names = get_binary_names(@bins);

if (!scalar(@bins)) {
    print "No package found.\n";
    exit;
}

#
# Print package name options
#
my $i = 1;
foreach my $n (@binary_names) {
    print "$i. $n\n";
    $i++;
}


#
# Select a package name option
#
print "Choose a number: ";
my $selected_name_number = type_a_number(1, scalar(@binary_names));
my $selected_name = $binary_names[$selected_name_number - 1];

print "You have selected package name: $selected_name\n";

my @binary_options = get_binary_by_name($selected_name, @bins);


#
# Print binary package options
#
$i = 1;
foreach my $b (@binary_options) {
    print_binary_option($b, $i);
    print "\n";
    $i++;
}


#
# Select a binary package option
#
print "Choose a number: ";
my $selected_binary_number = type_a_number(1, scalar(@binary_options));

my $selected_binary = $binary_options[$selected_binary_number - 1];

print "You have selected binary package: ";
print_binary_option($selected_binary);
print "\n";


#
# Install selected package
#
install_binary($selected_binary);

sub get_distribution {
    my $config = Config::Tiny->read('/etc/os-release');
    my $name = $config->{_}->{NAME};
    my $version = $config->{_}->{VERSION};
    $name = substr $name, 1, -1; # Remove quotes
    if ($name eq 'openSUSE Tumbleweed') {
        return 'openSUSE:Factory';
    } elsif ($name eq 'openSUSE Leap') {
        return 'openSUSE:Leap:' . $version;
    } else {
        print "Your distribution $name $version is not supported.\n";
        exit 1;
    }
}

sub get_architecture {
    my $perl_arch = $Config{'archname'};

    if (substr($perl_arch, 0, 4) eq 'i386') {
        return 'i586';
    }

    $perl_arch =~ m/^([a-z0-9_]+)/;

    return $&;
}

sub type_a_number {
    my $min = $_[0];
    my $max = $_[1];
    my $typed_number = <STDIN>;
    chomp $typed_number;
    if ($typed_number =~ /^(\d+)$/) {
        $typed_number += 0; # Convert string to number
        if ($typed_number >= $min && $typed_number <= $max) {
            return $typed_number;
        }
    }

    print "Number must be between $min and $max. Please try again: ";
    return type_a_number(@_);
}

sub print_binary_option {
    my $binary = $_[0];
    my $number = $_[1];
    my $color;
    my $symbol;
    if (is_official_project($binary->{project})) {
        $color = 'green';
        $symbol = 'âœ“';
    } elsif (is_personal_project($binary->{project})) {
        $color = 'red';
        $symbol = '?';
    } else {
        $color = 'cyan';
        $symbol = '+';
    }

    if ($number) {
        print "$number. ";
    }

    print colored($binary->{project} . ' ' . $symbol, $color);
    print " | $binary->{version} | $binary->{arch}";
}

sub search_published_binary {
    my $distribution = get_distribution();

    my $endpoint = '/search/published/binary/id';

    my $query_string = join "', '", @_;
    $query_string = "'" . $query_string . "'";
    my $xpath = "contains-ic(\@name, $query_string) and path/project='$distribution'";

    my $url = $server . $endpoint . '?match=' . uri_escape($xpath);

    my $req = HTTP::Request->new(GET => $url);
    my $ua = LWP::UserAgent->new;
    my $resp = $ua->request($req);
    if ($resp->is_success) {
        my $message = $resp->decoded_content;

        open(my $fh, '>', 'search.xml');
        print $fh $message;
        close $fh;

        my $dom = XML::LibXML->load_xml(string => $message);

        my @collection = ();

        my $arch = get_architecture();

        foreach my $binary ($dom->findnodes('/collection/binary')) {
            my %binary_data;
            $binary_data{'name'} = $binary->getAttribute('name');
            $binary_data{'project'} = $binary->getAttribute('project');
            $binary_data{'package'} = $binary->getAttribute('package');
            $binary_data{'repository'} = $binary->getAttribute('repository');
            $binary_data{'version'} = $binary->getAttribute('version');
            $binary_data{'release'} = $binary->getAttribute('release');
            $binary_data{'arch'} = $binary->getAttribute('arch');
            $binary_data{'filename'} = $binary->getAttribute('filename');
            $binary_data{'filepath'} = $binary->getAttribute('filepath');
            $binary_data{'baseproject'} = $binary->getAttribute('baseproject');
            $binary_data{'type'} = $binary->getAttribute('type');
            # Filter out ghost binary (package has been deleted, but binary still exists)
            if ( ! $binary_data{'package'} ) {
                next;
            }

            # Filter out debuginfo, debugsource, buildsymbols packages
            if ( substr($binary->{'name'}, -10) eq '-debuginfo' ) {
                next;
            } elsif ( substr($binary->{'name'}, -12) eq '-debugsource' ) {
                next;
            } elsif ( substr($binary->{'name'}, -13) eq '-buildsymbols' ) {
                next;
            }

            # Filter out source packages
            if ( $binary->{'arch'} eq 'src' ) {
                next;
            }

            # Filter architecture
            unless ( $binary->{'arch'} eq $arch ) {
                unless ( $binary->{'arch'} eq 'i586' && $arch eq 'x86_64' ) {
                    next;
                }
            }

            push @collection, \%binary_data;
        }

        return sort { -get_binary_weight($a) <=> -get_binary_weight($b) } @collection;
    }
    else {
        print "HTTP GET error code: ", $resp->code, "\n";
        print "HTTP GET error message: ", $resp->message, "\n";
    }
}

sub get_binary_names {
    my @names = ();
    foreach my $bin (@_) {
        my $name = $bin->{'name'};
        if (! grep /($name)/, @names) {
            push @names, $name;
        }
    }
    return @names;
}

sub get_binary_weight {
    my $binary = $_[0];
    my $weights = {
        official => 0,
        main => 0,
        dashes => 0,
        arch => 0,
    };

    if ( is_official_project($binary->{'project'}) ) {
        $weights->{official} = 20000;
    } elsif ( is_personal_project($binary->{'project'}) ) {
        $weights->{official} = 0;
    } else {
        $weights->{official} = 10000;
    }

    if ( $binary->{'name'} eq $binary->{'package'} ) {
        $weights->{main} = 1000;
    }

    my $dash_count = () = $binary->{'name'} =~ /-/g;
    $weights->{dashes} = 100 * (0.5**$dash_count);

    if ($binary->{'arch'} eq 'x86_64') {
        $weights->{arch} = 10;
    }

    return $weights->{official} + $weights->{main} + $weights->{dashes} + $weights->{arch};
}

sub is_official_project {
    return substr($_[0], 0, 9) eq 'openSUSE:';
}

sub is_experimental_project {
    return !is_official_project(@_) && !is_personal_project(@_);
}

sub is_personal_project {
    return substr($_[0], 0, 5) eq 'home:' || substr($_[0], 0, 4) eq 'isv:';
}

sub get_binary_by_name {
    my $name = $_[0];
    my @binary_list = splice @_, 1;
    my @filtered_binary_list = ();

    foreach my $bin (@binary_list) {
        if ($name eq $bin->{'name'}) {
            push @filtered_binary_list, $bin;
        }
    }

    return @filtered_binary_list;
}

sub install_binary {
    my $binary = $_[0];
    my $name = $binary->{name};
    my $arch = $binary->{arch};
    my $project = $binary->{project};
    my $repository = $binary->{repository};

    # Install official packages. Don't add repositories
    if (is_official_project($project)) {
        system "sudo zypper install $name.$arch";
    }
    # Install experimental and personal packages
    else {
        my $repo_url = "https://download.opensuse.org/repositories/$project/$repository/";
        my $repo_file = "$repo_url/$project.repo";
        system "sudo zypper addrepo --refresh $repo_file";
        system "sudo zypper refresh";
        my $install_options = "--allow-vendor-change --allow-arch-change --allow-downgrade --allow-name-change";
        $project =~ s/:/_/ig;
        system "sudo zypper install $install_options --repo $project $name.$arch";
    }
}
